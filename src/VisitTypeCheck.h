#pragma once
#include "Stella/Absyn.H"

namespace Stella
{
    class VisitTypeCheck final : public Visitor
    {
    public:
        void visitProgram(Program* p) override;
        void visitLanguageDecl(LanguageDecl* p) override;
        void visitExtension(Extension* p) override;
        void visitDecl(Decl* p) override;
        void visitLocalDecl(LocalDecl* p) override;
        void visitAnnotation(Annotation* p) override;
        void visitParamDecl(ParamDecl* p) override;
        void visitReturnType(ReturnType* p) override;
        void visitThrowType(ThrowType* p) override;
        void visitType(Type* p) override;
        void visitMatchCase(MatchCase* p) override;
        void visitOptionalTyping(OptionalTyping* p) override;
        void visitPatternData(PatternData* p) override;
        void visitExprData(ExprData* p) override;
        void visitPattern(Pattern* p) override;
        void visitLabelledPattern(LabelledPattern* p) override;
        void visitBinding(Binding* p) override;
        void visitExpr(Expr* p) override;
        void visitPatternBinding(PatternBinding* p) override;
        void visitVariantFieldType(VariantFieldType* p) override;
        void visitRecordFieldType(RecordFieldType* p) override;
        void visitTyping(Typing* p) override;
        void visitAProgram(AProgram* a_program) override;
        void visitLanguageCore(LanguageCore* language_core) override;
        void visitAnExtension(AnExtension* an_extension) override;
        void visitDeclFun(DeclFun* decl_fun) override;
        void visitDeclTypeAlias(DeclTypeAlias* decl_type_alias) override;
        void visitDeclExceptionType(DeclExceptionType* decl_exception_type) override;
        void visitDeclExceptionVariant(DeclExceptionVariant* decl_exception_variant) override;
        void visitALocalDecl(ALocalDecl* a_local_decl) override;
        void visitInlineAnnotation(InlineAnnotation* inline_annotation) override;
        void visitAParamDecl(AParamDecl* a_param_decl) override;
        void visitNoReturnType(NoReturnType* no_return_type) override;
        void visitSomeReturnType(SomeReturnType* some_return_type) override;
        void visitNoThrowType(NoThrowType* no_throw_type) override;
        void visitSomeThrowType(SomeThrowType* some_throw_type) override;
        void visitAMatchCase(AMatchCase* a_match_case) override;
        void visitNoTyping(NoTyping* no_typing) override;
        void visitSomeTyping(SomeTyping* some_typing) override;
        void visitNoPatternData(NoPatternData* no_pattern_data) override;
        void visitSomePatternData(SomePatternData* some_pattern_data) override;
        void visitNoExprData(NoExprData* no_expr_data) override;
        void visitSomeExprData(SomeExprData* some_expr_data) override;
        void visitPatternVariant(PatternVariant* pattern_variant) override;
        void visitPatternInl(PatternInl* pattern_inl) override;
        void visitPatternInr(PatternInr* pattern_inr) override;
        void visitPatternTuple(PatternTuple* pattern_tuple) override;
        void visitPatternRecord(PatternRecord* pattern_record) override;
        void visitPatternList(PatternList* pattern_list) override;
        void visitPatternCons(PatternCons* pattern_cons) override;
        void visitPatternFalse(PatternFalse* pattern_false) override;
        void visitPatternTrue(PatternTrue* pattern_true) override;
        void visitPatternUnit(PatternUnit* pattern_unit) override;
        void visitPatternInt(PatternInt* pattern_int) override;
        void visitPatternSucc(PatternSucc* pattern_succ) override;
        void visitPatternVar(PatternVar* pattern_var) override;
        void visitALabelledPattern(ALabelledPattern* a_labelled_pattern) override;
        void visitABinding(ABinding* a_binding) override;
        void visitSequence(Sequence* sequence) override;
        void visitAssign(Assign* assign) override;
        void visitIf(If* if_) override;
        void visitLet(Let* let) override;
        void visitLetRec(LetRec* let_rec) override;
        void visitAPatternBinding(APatternBinding* a_pattern_binding) override;
        void visitLessThan(LessThan* less_than) override;
        void visitLessThanOrEqual(LessThanOrEqual* less_than_or_equal) override;
        void visitGreaterThan(GreaterThan* greater_than) override;
        void visitGreaterThanOrEqual(GreaterThanOrEqual* greater_than_or_equal) override;
        void visitEqual(Equal* equal) override;
        void visitNotEqual(NotEqual* not_equal) override;
        void visitTypeAsc(TypeAsc* type_asc) override;
        void visitTypeCast(TypeCast* type_cast) override;
        void visitAbstraction(Abstraction* abstraction) override;
        void visitVariant(Variant* variant) override;
        void visitMatch(Match* match) override;
        void visitList(List* list) override;
        void visitAdd(Add* add) override;
        void visitSubtract(Subtract* subtract) override;
        void visitLogicOr(LogicOr* logic_or) override;
        void visitMultiply(Multiply* multiply) override;
        void visitDivide(Divide* divide) override;
        void visitLogicAnd(LogicAnd* logic_and) override;
        void visitRef(Ref* ref) override;
        void visitDeref(Deref* deref) override;
        void visitApplication(Application* application) override;
        void visitDotRecord(DotRecord* dot_record) override;
        void visitDotTuple(DotTuple* dot_tuple) override;
        void visitTuple(Tuple* tuple) override;
        void visitRecord(Record* record) override;
        void visitConsList(ConsList* cons_list) override;
        void visitHead(Head* head) override;
        void visitIsEmpty(IsEmpty* is_empty) override;
        void visitTail(Tail* tail) override;
        void visitPanic(Panic* panic) override;
        void visitThrow(Throw* throw_) override;
        void visitTryCatch(TryCatch* try_catch) override;
        void visitTryWith(TryWith* try_with) override;
        void visitInl(Inl* inl) override;
        void visitInr(Inr* inr) override;
        void visitSucc(Succ* succ) override;
        void visitLogicNot(LogicNot* logic_not) override;
        void visitPred(Pred* pred) override;
        void visitIsZero(IsZero* is_zero) override;
        void visitFix(Fix* fix) override;
        void visitNatRec(NatRec* nat_rec) override;
        void visitFold(Fold* fold) override;
        void visitUnfold(Unfold* unfold) override;
        void visitConstTrue(ConstTrue* const_true) override;
        void visitConstFalse(ConstFalse* const_false) override;
        void visitConstUnit(ConstUnit* const_unit) override;
        void visitConstInt(ConstInt* const_int) override;
        void visitConstMemory(ConstMemory* const_memory) override;
        void visitVar(Var* var) override;
        void visitTypeFun(TypeFun* type_fun) override;
        void visitTypeRec(TypeRec* type_rec) override;
        void visitTypeSum(TypeSum* type_sum) override;
        void visitTypeTuple(TypeTuple* type_tuple) override;
        void visitTypeRecord(TypeRecord* type_record) override;
        void visitTypeVariant(TypeVariant* type_variant) override;
        void visitTypeList(TypeList* type_list) override;
        void visitTypeBool(TypeBool* type_bool) override;
        void visitTypeNat(TypeNat* type_nat) override;
        void visitTypeUnit(TypeUnit* type_unit) override;
        void visitTypeTop(TypeTop* type_top) override;
        void visitTypeBottom(TypeBottom* type_bottom) override;
        void visitTypeRef(TypeRef* type_ref) override;
        void visitTypeVar(TypeVar* type_var) override;
        void visitAVariantFieldType(AVariantFieldType* a_variant_field_type) override;
        void visitARecordFieldType(ARecordFieldType* a_record_field_type) override;
        void visitATyping(ATyping* a_typing) override;
        void visitListStellaIdent(ListStellaIdent* list_stella_ident) override;
        void visitListExtensionName(ListExtensionName* list_extension_name) override;
        void visitListExtension(ListExtension* list_extension) override;
        void visitListDecl(ListDecl* list_decl) override;
        void visitListLocalDecl(ListLocalDecl* list_local_decl) override;
        void visitListAnnotation(ListAnnotation* list_annotation) override;
        void visitListParamDecl(ListParamDecl* list_param_decl) override;
        void visitListType(ListType* list_type) override;
        void visitListMatchCase(ListMatchCase* list_match_case) override;
        void visitListPattern(ListPattern* list_pattern) override;
        void visitListLabelledPattern(ListLabelledPattern* list_labelled_pattern) override;
        void visitListBinding(ListBinding* list_binding) override;
        void visitListExpr(ListExpr* list_expr) override;
        void visitListPatternBinding(ListPatternBinding* list_pattern_binding) override;
        void visitListVariantFieldType(ListVariantFieldType* list_variant_field_type) override;
        void visitListRecordFieldType(ListRecordFieldType* list_record_field_type) override;

        void visitDeclFunGeneric(DeclFunGeneric* decl_fun_generic) override;
        void visitTypeAbstraction(TypeAbstraction* type_abstraction) override;
        void visitTypeApplication(TypeApplication* type_application) override;
        void visitTypeForAll(TypeForAll* type_for_all) override;

        void visitInteger(Integer x) override;
        void visitChar(Char x) override;
        void visitDouble(Double x) override;
        void visitString(String x) override;
        void visitIdent(Ident x) override;
        void visitStellaIdent(StellaIdent x) override;
        void visitExtensionName(ExtensionName x) override;
        void visitMemoryAddress(MemoryAddress x) override;

        void visitPatternCastAs(PatternCastAs* p) override;
        void visitTryCastAs(TryCastAs* p) override;
        void visitPatternAsc(PatternAsc* p) override;
        void visitTypeAuto(TypeAuto* p) override;
    };
} // namespace Stella
